import { VerticalBox , ScrollView} from "std-widgets.slint";
import { Tile } from "tile.slint";
import { Colors } from "colors.slint";

export struct PartitionIO {
    name: string,
    read: float,
    write: float
}

export struct DiskIO {
    name: string,
    read: float,
    write: float,
    part: [PartitionIO]
}

export global IOAdapter {
    in property <[DiskIO]> disks;
}

component DiskBox {
    in property <string> name : "Disk";
    in property <float> read;
    in property <float> write;
    in property <[PartitionIO]> part;

    Rectangle {width: 100%; height: 60px; background: Colors.palette.bar-background; border-radius: 5px; border-width: 1px; border-color: Colors.palette.bar-border;
        VerticalLayout { 
            padding: 2px;
            Text { text: " \{name}"; font-weight: 600; font-italic: true; padding-left: 2px;}
            Text { text: "    Read: " + read + " MB/s"; padding-left: 8px; }
            Text { text: "    Write: " + write + " MB/s"; padding-left: 8px;}
        }
    }

    popup := PopupWindow {
        Rectangle { background: black; width: 100%; padding: 10px;
            VerticalLayout { height:100%; width: 100%;  padding: 10px; 
                for p in part : Text { 
                    text: p.name + ": Total Read: " + p.read + " MB | Total Written: " + p.write + " MB"; 
                }
            }}
        
        x: 20px; y: 20px; height: 50px; width: 50px;
    }
    TouchArea {
        height:100%; width: 100%;
        clicked => { popup.show(); }
    }
}

export component IO inherits Tile {
    in property <[DiskIO]> disks <=> IOAdapter.disks;
    VerticalLayout {
        padding: 10px;
        Text{ text: "Disk IO"; font-weight: 600; }
        ScrollView { 
            VerticalLayout { 
                alignment: LayoutAlignment.start;
                padding: 5px;
                for disk in disks : DiskBox {
                    name: disk.name;
                    read: disk.read;
                    write: disk.write;
                    part: disk.part;
                }
            }
        }
    }
} 